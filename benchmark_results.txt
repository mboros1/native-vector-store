🔥 Vector Store Loader Benchmark



🗂️  Testing with: Orchestrator docs (465 files, ~45MB total)
   Path: /Users/martinboros/git/test/orchestrator/project_workspace/worker_vector_store/native-vector-store/out_embedded

📊 Benchmarking Standard loader (with optimizations)
   Run 10: 10.89ms (465 docs loaded)
   Run 20: 11.78ms (465 docs loaded)
   📈 Results (20 runs):
      Min: 10.53ms
      Max: 45.38ms
      Avg: 13.43ms
      Median: 11.58ms
      Std Dev: 7.44ms

--- With cold cache ---

📊 Benchmarking Standard loader (cold cache)
   Run 10: 49.99ms (465 docs loaded)
   Run 20: 53.05ms (465 docs loaded)
   📈 Results (20 runs):
      Min: 49.99ms
      Max: 58.31ms
      Avg: 52.99ms
      Median: 52.27ms
      Std Dev: 2.42ms

📊 Benchmarking Memory-mapped loader (cold cache)
   Run 10: 37.49ms (465 docs loaded)
   Run 20: 18.58ms (465 docs loaded)
   📈 Results (20 runs):
      Min: 12.76ms
      Max: 37.49ms
      Avg: 16.71ms
      Median: 14.67ms
      Std Dev: 5.42ms

📊 Benchmarking Adaptive loader (cold cache)
   Run 10: 17.32ms (465 docs loaded)
   Run 20: 24.31ms (465 docs loaded)
   📈 Results (20 runs):
      Min: 13.39ms
      Max: 31.39ms
      Avg: 17.66ms
      Median: 15.28ms
      Std Dev: 5.31ms

📊 Summary:
   Standard loader (with optimizations): 13.43ms avg
   Standard loader (cold cache): 52.99ms avg
   Memory-mapped loader (cold cache): 16.71ms avg
   Adaptive loader (cold cache): 17.66ms avg
   → Memory-mapped loader (cold cache) is 3.17x faster
   → Adaptive loader (cold cache) is 3.00x faster


🗂️  Testing with: C++ standard (2 files, ~340MB total)
   Path: /Users/martinboros/git/test/orchestrator/project_workspace/worker_vector_store/native-vector-store/cpp_std_embedded

📊 Benchmarking Standard loader (with optimizations)
   Run 10: 721.56ms (6557 docs loaded)
   Run 20: 726.00ms (6557 docs loaded)
   📈 Results (20 runs):
      Min: 668.55ms
      Max: 726.00ms
      Avg: 704.47ms
      Median: 706.85ms
      Std Dev: 13.46ms

--- With cold cache ---

📊 Benchmarking Standard loader (cold cache)
   Run 10: 730.55ms (6557 docs loaded)
   Run 20: 851.18ms (6557 docs loaded)
   📈 Results (20 runs):
      Min: 671.99ms
      Max: 851.18ms
      Avg: 732.19ms
      Median: 729.89ms
      Std Dev: 35.32ms

📊 Benchmarking Memory-mapped loader (cold cache)
   Run 10: 969.65ms (6557 docs loaded)
   Run 20: 1015.72ms (6557 docs loaded)
   📈 Results (20 runs):
      Min: 969.65ms
      Max: 1534.69ms
      Avg: 1077.15ms
      Median: 1029.76ms
      Std Dev: 135.08ms

📊 Benchmarking Adaptive loader (cold cache)
   Run 10: 733.41ms (6557 docs loaded)
   Run 20: 768.72ms (6557 docs loaded)
   📈 Results (20 runs):
      Min: 703.83ms
      Max: 997.10ms
      Avg: 746.58ms
      Median: 729.92ms
      Std Dev: 63.94ms

📊 Summary:
   Standard loader (with optimizations): 704.47ms avg
   Standard loader (cold cache): 732.19ms avg
   Memory-mapped loader (cold cache): 1077.15ms avg
   Adaptive loader (cold cache): 746.58ms avg
   → Memory-mapped loader (cold cache) is 0.68x faster
   → Adaptive loader (cold cache) is 0.98x faster


🗂️  Testing with: C++ standard partitioned (66 files, ~340MB total, 100 docs/file)
   Path: /Users/martinboros/git/test/orchestrator/project_workspace/worker_vector_store/native-vector-store/cpp_std_partitioned

📊 Benchmarking Standard loader (with optimizations)
   Run 10: 220.99ms (6557 docs loaded)
   Run 20: 234.35ms (6557 docs loaded)
   📈 Results (20 runs):
      Min: 203.36ms
      Max: 783.93ms
      Avg: 271.25ms
      Median: 240.90ms
      Std Dev: 121.16ms

--- With cold cache ---

📊 Benchmarking Standard loader (cold cache)
   Run 10: 478.34ms (6557 docs loaded)
   Run 20: 363.27ms (6557 docs loaded)
   📈 Results (20 runs):
      Min: 276.85ms
      Max: 680.33ms
      Avg: 430.84ms
      Median: 418.12ms
      Std Dev: 80.47ms

📊 Benchmarking Memory-mapped loader (cold cache)
   Run 10: 274.59ms (6557 docs loaded)
   Run 20: 229.52ms (6557 docs loaded)
   📈 Results (20 runs):
      Min: 157.06ms
      Max: 392.94ms
      Avg: 283.51ms
      Median: 282.30ms
      Std Dev: 58.11ms

📊 Benchmarking Adaptive loader (cold cache)
   Run 10: 146.24ms (6557 docs loaded)
   Run 20: 214.64ms (6557 docs loaded)
   📈 Results (20 runs):
      Min: 140.50ms
      Max: 428.92ms
      Avg: 213.04ms
      Median: 189.37ms
      Std Dev: 74.98ms

📊 Summary:
   Standard loader (with optimizations): 271.25ms avg
   Standard loader (cold cache): 430.84ms avg
   Memory-mapped loader (cold cache): 283.51ms avg
   Adaptive loader (cold cache): 213.04ms avg
   → Memory-mapped loader (cold cache) is 1.52x faster
   → Adaptive loader (cold cache) is 2.02x faster

✅ Benchmark complete!

