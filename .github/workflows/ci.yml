name: C/C++ and Node.js CI

on:
  push:
    branches: [ "main", "feature/*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    # Install system dependencies
    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libomp-dev libsimdjson-dev
    
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libomp simdjson
    
    # Build and test Node.js module
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Build Node.js module
      run: npm run build
    
    - name: Run Node.js tests
      run: npm test
    
    # Build and test standalone C++ program
    - name: Build C++ test program
      run: |
        cd src
        make clean
        make
    
    - name: Run C++ tests
      run: |
        cd src
        ./test_vector_store ../test
    
    # Test with sample data
    - name: Test document loader
      run: node test/loader_test.js
    
    # Performance benchmark (only on Linux for consistency)
    - name: Run performance benchmark
      if: runner.os == 'Linux'
      run: node test/test.js

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --error-exitcode=1 --inline-suppr \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          src/*.cpp src/*.h
    
    - name: Run clang-tidy
      run: |
        clang-tidy src/*.cpp -- -I. -I/usr/include -std=c++17

  memory-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential valgrind libomp-dev libsimdjson-dev
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: Build C++ test program with debug symbols
      run: |
        cd src
        make clean
        make CXXFLAGS="-g -O0 -fno-omit-frame-pointer"
    
    - name: Run valgrind memory check
      run: |
        cd src
        valgrind --leak-check=full --error-exitcode=1 ./test_vector_store ../test

  package-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libomp-dev libsimdjson-dev
    
    - name: Test npm pack
      run: |
        npm ci
        npm pack
        
    - name: Test installation from pack
      run: |
        mkdir test-install
        cd test-install
        npm init -y
        npm install ../native-vector-store-*.tgz
        node -e "const { VectorStore } = require('native-vector-store'); console.log('Module loaded successfully');"

  cross-platform:
    strategy:
      matrix:
        include:
          - os: windows-latest
            node-version: 20.x
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Attempt build (Windows)
      continue-on-error: true
      run: npm run build
    
    - name: Note Windows support
      run: echo "Windows build is experimental and may require additional configuration"