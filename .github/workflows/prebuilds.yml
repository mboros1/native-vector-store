name: Build Prebuilds

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering for testing
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  prebuild-linux:
    runs-on: ubuntu-latest
    container:
      image: fedora:40
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          dnf install -y gcc-c++ make git nodejs npm python3 libgomp
          
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for Linux ${{ matrix.arch }}
        run: |
          # Build with dynamic OpenMP linking
          export CXXFLAGS="-fopenmp"
          npx prebuildify --napi --strip --arch=${{ matrix.arch }}
          
      - name: Verify dynamic dependencies
        run: |
          # Check dynamic dependencies
          echo "Checking shared library dependencies:"
          ldd prebuilds/linux-${{ matrix.arch }}/*.node || true
          echo ""
          echo "Required libraries:"
          objdump -p prebuilds/linux-${{ matrix.arch }}/*.node | grep NEEDED
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-linux-${{ matrix.arch }}
          path: prebuilds/

  prebuild-alpine:
    runs-on: ubuntu-latest
    container:
      image: node:18-alpine
    strategy:
      matrix:
        arch: [x64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install build dependencies
        run: |
          apk add --no-cache build-base git python3
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for Alpine ${{ matrix.arch }}
        run: |
          # Build with dynamic OpenMP linking
          export CXXFLAGS="-fopenmp"
          echo "Building musl prebuild for NAPI_VERSION=$(node -p 'process.versions.napi')"
          npx prebuildify --napi --arch=${{ matrix.arch }} --tag-libc
          
          # Check dynamic dependencies
          echo ""
          echo "Checking dynamic dependencies of built prebuild:"
          BUILT_NODE=$(find prebuilds -name "*.node" -type f | head -1)
          if [ -n "$BUILT_NODE" ]; then
            echo "Checking: $BUILT_NODE"
            ldd "$BUILT_NODE" 2>&1 || true
          fi
      
      - name: Inspect prebuild outputs
        run: |
          echo "::group::prebuilds directory structure"
          find prebuilds -type f | sort
          echo "::endgroup::"
          
          echo "::group::musl .node file headers"
          file prebuilds/**/*.node || true
          echo "::endgroup::"
          
          echo "::group::Check dynamic dependencies"
          if command -v ldd >/dev/null 2>&1; then
            for f in prebuilds/**/*.node; do
              echo "=== $f ==="
              ldd "$f" 2>&1 || true
            done
          fi
          echo "::endgroup::"
      
      - name: Ensure correct musl prebuild layout
        run: |
          # Calculate the correct destination paths
          ABI_DIR="napi-v$(node -p 'process.versions.napi')"
          ARCH="${{ matrix.arch }}"
          
          echo "Expected destinations for musl prebuild:"
          echo "- prebuilds/linux-${ARCH}-musl/${ABI_DIR}/native-vector-store.node"
          echo "- prebuilds/linux-${ARCH}-musl/native-vector-store.node"
          
          # Find the musl prebuild
          MUSL_NODE=$(find prebuilds -name "*.musl.node" -o -name "*.node" | grep -E "(musl|linux-${ARCH})" | head -1)
          
          if [ -z "$MUSL_NODE" ]; then
            echo "❌ No musl prebuild found!"
            exit 1
          fi
          
          echo "📋 Found musl prebuild at: $MUSL_NODE"
          
          # Ensure it exists in both locations node-gyp-build might check
          mkdir -p "prebuilds/linux-${ARCH}-musl/${ABI_DIR}"
          mkdir -p "prebuilds/linux-${ARCH}-musl"
          
          # Copy to both locations
          cp "$MUSL_NODE" "prebuilds/linux-${ARCH}-musl/${ABI_DIR}/native-vector-store.node"
          cp "$MUSL_NODE" "prebuilds/linux-${ARCH}-musl/native-vector-store.node"
          
          # Don't copy to non-musl location as it might confuse node-gyp-build
          # and cause it to load the wrong binary
          
          echo "✅ Copied musl prebuild to multiple locations for compatibility"
          
          # Clean up the original if it's in a different location
          if [ "$MUSL_NODE" != "prebuilds/linux-${ARCH}-musl/${ABI_DIR}/native-vector-store.node" ]; then
            rm -f "$MUSL_NODE"
          fi
          
          # IMPORTANT: Remove the regular Linux prebuild that won't work on Alpine
          # This prevents node-gyp-build from trying to load it first
          if [ -f "prebuilds/linux-${ARCH}/native-vector-store.node" ]; then
            echo "🗑️ Removing incompatible linux-${ARCH} prebuild for Alpine package"
            rm -f "prebuilds/linux-${ARCH}/native-vector-store.node"
          fi
          
          echo "📊 Final prebuild layout:"
          find prebuilds -type f | sort
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-alpine-${{ matrix.arch }}
          path: prebuilds/

  prebuild-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install libomp
        run: |
          brew install libomp
          # Find libomp static library
          export LIBOMP_PREFIX=$(brew --prefix libomp)
          echo "LIBOMP_PREFIX=$LIBOMP_PREFIX" >> $GITHUB_ENV
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for macOS ${{ matrix.arch }}
        run: |
          # Try to statically link libomp
          export LDFLAGS="-L${{ env.LIBOMP_PREFIX }}/lib"
          npx prebuildify --napi --strip --arch=${{ matrix.arch }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-darwin-${{ matrix.arch }}
          path: prebuilds/

  prebuild-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for Windows ${{ matrix.arch }}
        run: |
          npx prebuildify --napi --strip --arch=${{ matrix.arch }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-win32-${{ matrix.arch }}
          path: prebuilds/

  package:
    needs: [prebuild-linux, prebuild-alpine, prebuild-macos, prebuild-windows]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: prebuilds-*
          merge-multiple: true
          path: prebuilds/
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
      
      - name: List prebuilds
        run: |
          echo "Prebuilds found:"
          find prebuilds -type f -name "*.node" | sort
          echo ""
          echo "Full prebuild directory structure:"
          tree prebuilds/ || find prebuilds -type f | sort
          echo ""
          echo "Checking musl prebuilds specifically:"
          find prebuilds -path "*musl*" -name "*.node" | sort
      
      - name: Create package
        run: |
          npm pack
          echo ""
          echo "Package contents (prebuilds only):"
          tar -tzf *.tgz | grep "prebuilds" | sort
          echo ""
          echo "Musl prebuilds in package:"
          tar -tzf *.tgz | grep -E "musl|alpine" | sort || echo "No musl/alpine prebuilds found!"
          echo ""
          echo "Verifying exact musl prebuild path:"
          tar -tf native-vector-store-*.tgz | grep "linux-x64-musl/napi-v" || echo "❌ Missing expected musl prebuild path!"
          echo ""
          echo "All .node files in package:"
          tar -tf native-vector-store-*.tgz | grep "\.node$" | sort
          
      - uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: "*.tgz"

  # Test jobs for each platform
  test-linux-x64:
    needs: package
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install OpenMP runtime
        run: |
          sudo apt-get update
          sudo apt-get install -y libgomp1
      
      - name: Test packaged tarball
        run: |
          echo "Testing Linux x64 prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          npm install ../native-vector-store-*.tgz
          # Copy and run the installation test
          cp ../test/test-installed.js .
          node test-installed.js

  test-linux-arm64:
    needs: package
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Run tests in ARM64 container
        uses: docker://node:18-bullseye
        with:
          platform: linux/arm64
          args: |
            sh -c "
              apt-get update && apt-get install -y libgomp1 &&
              cd /github/workspace && 
              echo 'Testing Linux ARM64 prebuild...' &&
              mkdir test-install && cd test-install &&
              npm init -y >/dev/null &&
              npm install ../native-vector-store-*.tgz &&
              cp ../test/test-installed.js . &&
              node test-installed.js
            "

  test-alpine-x64:
    needs: package
    runs-on: ubuntu-latest
    container: node:18-alpine
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Install OpenMP runtime
        run: |
          apk add --no-cache libgomp
      
      - name: Test packaged tarball  
        run: |
          echo "Testing Alpine x64 prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          npm install ../native-vector-store-*.tgz
          # Copy and run the installation test
          cp ../test/test-installed.js .
          node test-installed.js

  test-macos:
    needs: package
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: macos-13  # Intel Mac
            arch: x64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install OpenMP runtime
        run: |
          brew install libomp
      
      - name: Test packaged tarball
        run: |
          echo "Testing macOS ${{ matrix.arch }} prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          
          # Install the package normally
          npm install ../native-vector-store-*.tgz
          
          # Copy and run the installation test
          cp ../test/test-installed.js .
          node test-installed.js

  test-windows-x64:
    needs: package
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Test packaged tarball
        shell: bash
        run: |
          echo "Testing Windows x64 prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          npm install ../native-vector-store-*.tgz
          # Copy and run the installation test
          cp ../test/test-installed.js .
          node test-installed.js