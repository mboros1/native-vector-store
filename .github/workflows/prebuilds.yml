name: Build Prebuilds

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering for testing
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  prebuild-linux:
    runs-on: ubuntu-latest
    container:
      image: fedora:40
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          dnf install -y gcc-c++ make cmake git nodejs npm python3 perl
          
      - name: Build static libomp
        run: |
          set -euo pipefail
          
          git clone --depth 1 --branch llvmorg-18.1.8 https://github.com/llvm/llvm-project.git
          
          cmake -S llvm-project/openmp -B openmp-build \
                -DCMAKE_BUILD_TYPE=Release \
                -DLIBOMP_ENABLE_SHARED=OFF \
                -DOPENMP_ENABLE_LIBOMPTARGET=OFF \
                -DOPENMP_ENABLE_ARCHER=OFF
          
          cmake --build openmp-build --target omp -j"$(nproc)"
          
          # Locate artifacts robustly
          LIBOMP_PATH=$(find openmp-build -type f -name 'libomp.a' | head -n 1)
          HEADER_PATH=$(find llvm-project/openmp -type f -name 'omp.h' | head -n 1)
          
          if [[ -z "$LIBOMP_PATH" || -z "$HEADER_PATH" ]]; then
            echo "❌  libomp.a or omp.h not found"; exit 1
          fi
          
          echo "libomp.a → $LIBOMP_PATH"
          echo "omp.h    → $HEADER_PATH"
          
          cp "$LIBOMP_PATH" /usr/local/lib/
          cp "$HEADER_PATH" /usr/local/include/
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for Linux ${{ matrix.arch }}
        run: |
          # Static link only libomp, keep the addon as a shared object
          export CXXFLAGS="-fopenmp -I/usr/local/include"
          export LDFLAGS="-L/usr/local/lib -Wl,-Bstatic -l:libomp.a -Wl,-Bdynamic -static-libgcc -pthread"
          npx prebuildify --napi --strip --arch=${{ matrix.arch }}
          
      - name: Verify static linking
        run: |
          # Check that OpenMP is statically linked
          echo "Checking for OpenMP dependencies..."
          objdump -p prebuilds/linux-${{ matrix.arch }}/*.node | grep NEEDED | grep -i omp || echo "✓ No OpenMP runtime dependency"
          echo "All shared library dependencies:"
          ldd prebuilds/linux-${{ matrix.arch }}/*.node || true
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-linux-${{ matrix.arch }}
          path: prebuilds/

  prebuild-alpine:
    runs-on: ubuntu-latest
    container:
      image: node:18-alpine
    strategy:
      matrix:
        arch: [x64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install build dependencies
        run: |
          apk add --no-cache build-base git python3
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for Alpine ${{ matrix.arch }}
        run: |
          # Static link only libgomp, keep the addon as shared object
          export CXXFLAGS="-fopenmp"
          export LDFLAGS="-Wl,-Bstatic -l:libgomp.a -Wl,-Bdynamic -pthread"
          echo "Building musl prebuild for NAPI_VERSION=$(node -p 'process.versions.napi')"
          npx prebuildify --napi --arch=${{ matrix.arch }} --tag-libc
      
      - name: Inspect prebuild outputs
        run: |
          echo "::group::prebuilds directory structure"
          find prebuilds -type f | sort
          echo "::endgroup::"
          
          echo "::group::musl .node file headers"
          file prebuilds/**/*.node || true
          echo "::endgroup::"
          
          echo "::group::Check dynamic dependencies"
          if command -v ldd >/dev/null 2>&1; then
            for f in prebuilds/**/*.node; do
              echo "=== $f ==="
              ldd "$f" 2>&1 || true
            done
          fi
          echo "::endgroup::"
      
      - name: Ensure correct musl prebuild layout
        run: |
          # Calculate the correct destination paths
          ABI_DIR="napi-v$(node -p 'process.versions.napi')"
          ARCH="${{ matrix.arch }}"
          
          echo "Expected destinations for musl prebuild:"
          echo "- prebuilds/linux-${ARCH}-musl/${ABI_DIR}/native-vector-store.node"
          echo "- prebuilds/linux-${ARCH}-musl/native-vector-store.node"
          
          # Find the musl prebuild
          MUSL_NODE=$(find prebuilds -name "*.musl.node" -o -name "*.node" | grep -E "(musl|linux-${ARCH})" | head -1)
          
          if [ -z "$MUSL_NODE" ]; then
            echo "❌ No musl prebuild found!"
            exit 1
          fi
          
          echo "📋 Found musl prebuild at: $MUSL_NODE"
          
          # Ensure it exists in both locations node-gyp-build might check
          mkdir -p "prebuilds/linux-${ARCH}-musl/${ABI_DIR}"
          mkdir -p "prebuilds/linux-${ARCH}-musl"
          
          # Copy to both locations
          cp "$MUSL_NODE" "prebuilds/linux-${ARCH}-musl/${ABI_DIR}/native-vector-store.node"
          cp "$MUSL_NODE" "prebuilds/linux-${ARCH}-musl/native-vector-store.node"
          
          # Also try the non-ABI location that node-gyp-build might check
          mkdir -p "prebuilds/linux-${ARCH}"
          cp "$MUSL_NODE" "prebuilds/linux-${ARCH}/native-vector-store.node"
          
          echo "✅ Copied musl prebuild to multiple locations for compatibility"
          
          # Clean up the original if it's in a different location
          if [ "$MUSL_NODE" != "prebuilds/linux-${ARCH}-musl/${ABI_DIR}/native-vector-store.node" ]; then
            rm -f "$MUSL_NODE"
          fi
          
          echo "📊 Final prebuild layout:"
          find prebuilds -type f | sort
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-alpine-${{ matrix.arch }}
          path: prebuilds/

  prebuild-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install libomp
        run: |
          brew install libomp
          # Find libomp static library
          export LIBOMP_PREFIX=$(brew --prefix libomp)
          echo "LIBOMP_PREFIX=$LIBOMP_PREFIX" >> $GITHUB_ENV
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for macOS ${{ matrix.arch }}
        run: |
          # Try to statically link libomp
          export LDFLAGS="-L${{ env.LIBOMP_PREFIX }}/lib"
          npx prebuildify --napi --strip --arch=${{ matrix.arch }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-darwin-${{ matrix.arch }}
          path: prebuilds/

  prebuild-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for Windows ${{ matrix.arch }}
        run: |
          npx prebuildify --napi --strip --arch=${{ matrix.arch }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-win32-${{ matrix.arch }}
          path: prebuilds/

  package:
    needs: [prebuild-linux, prebuild-alpine, prebuild-macos, prebuild-windows]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: prebuilds-*
          merge-multiple: true
          path: prebuilds/
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
      
      - name: List prebuilds
        run: |
          echo "Prebuilds found:"
          find prebuilds -type f -name "*.node" | sort
          echo ""
          echo "Full prebuild directory structure:"
          tree prebuilds/ || find prebuilds -type f | sort
          echo ""
          echo "Checking musl prebuilds specifically:"
          find prebuilds -path "*musl*" -name "*.node" | sort
      
      - name: Create package
        run: |
          npm pack
          echo ""
          echo "Package contents (prebuilds only):"
          tar -tzf *.tgz | grep "prebuilds" | sort
          echo ""
          echo "Musl prebuilds in package:"
          tar -tzf *.tgz | grep -E "musl|alpine" | sort || echo "No musl/alpine prebuilds found!"
          echo ""
          echo "Verifying exact musl prebuild path:"
          tar -tf native-vector-store-*.tgz | grep "linux-x64-musl/napi-v" || echo "❌ Missing expected musl prebuild path!"
          echo ""
          echo "All .node files in package:"
          tar -tf native-vector-store-*.tgz | grep "\.node$" | sort
          
      - uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: "*.tgz"

  # Test jobs for each platform
  test-linux-x64:
    needs: package
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Test packaged tarball
        run: |
          echo "Testing Linux x64 prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          npm install ../native-vector-store-*.tgz
          # Copy and run the installation test
          cp ../test/test-installed.js .
          node test-installed.js

  test-linux-arm64:
    needs: package
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Run tests in ARM64 container
        uses: docker://node:18-bullseye
        with:
          platform: linux/arm64
          args: |
            sh -c "
              cd /github/workspace && 
              echo 'Testing Linux ARM64 prebuild...' &&
              mkdir test-install && cd test-install &&
              npm init -y >/dev/null &&
              npm install ../native-vector-store-*.tgz &&
              cp ../test/test-installed.js . &&
              node test-installed.js
            "

  test-alpine-x64:
    needs: package
    runs-on: ubuntu-latest
    container: node:18-alpine
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Test packaged tarball  
        run: |
          echo "Testing Alpine x64 prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          
          # Extract and examine the package first
          echo "Extracting package to examine contents..."
          tar -xzf ../native-vector-store-*.tgz
          echo ""
          echo "Package prebuild structure:"
          find package/prebuilds -type f 2>/dev/null | sort || echo "No prebuilds directory found"
          echo ""
          echo "Looking for musl prebuilds:"
          find package -path "*musl*" -name "*.node" 2>/dev/null | sort || echo "No musl prebuilds found"
          
          # Install the package normally (with install scripts)
          echo ""
          echo "Installing package..."
          npm install ../native-vector-store-*.tgz
          
          # Check what node-gyp-build will look for
          echo ""
          echo "Node platform info:"
          node -p "process.platform"
          node -p "process.arch" 
          node -p "process.versions.napi"
          node -p "process.report.getReport().header.glibcVersionRuntime || 'musl'"
          
          # Debug node-gyp-build behavior
          echo ""
          echo "Debugging node-gyp-build prebuild detection:"
          cd node_modules/native-vector-store
          echo "Current directory: $(pwd)"
          echo "Files in prebuilds:"
          find prebuilds -type f 2>/dev/null | sort || echo "No prebuilds directory"
          
          # Try to manually check what node-gyp-build would look for
          echo ""
          echo "Testing node-gyp-build detection:"
          node -e "
            const os = require('os');
            const path = require('path');
            console.log('Platform:', os.platform());
            console.log('Arch:', os.arch());
            console.log('Expected paths node-gyp-build might check:');
            const abi = 'napi-v' + process.versions.napi;
            console.log('- prebuilds/' + os.platform() + '-' + os.arch() + '/' + abi);
            console.log('- prebuilds/' + os.platform() + '-' + os.arch());
            // For musl
            console.log('- prebuilds/' + os.platform() + '-' + os.arch() + '-musl/' + abi);
            console.log('- prebuilds/' + os.platform() + '-' + os.arch() + '-musl');
          "
          cd ../..
          
          # Check installed package structure
          echo ""
          echo "Installed package prebuilds:"
          find node_modules/native-vector-store/prebuilds -type f 2>/dev/null | sort || echo "No prebuilds found in installed package"
          
          # Try loading the prebuild directly to verify it works
          echo ""
          echo "Testing if prebuild can be loaded directly:"
          node -e "
            const fs = require('fs');
            const path = './node_modules/native-vector-store/prebuilds/linux-x64-musl/napi-v9/native-vector-store.node';
            
            // First check if file exists
            if (!fs.existsSync(path)) {
              console.log('❌ Prebuild file does not exist at:', path);
              console.log('Contents of prebuilds directory:');
              try {
                const files = require('child_process').execSync('find node_modules/native-vector-store/prebuilds -type f', {encoding: 'utf8'});
                console.log(files);
              } catch (e) {}
            } else {
              console.log('✅ Prebuild file exists at:', path);
              try {
                const binding = require(path);
                console.log('✅ Prebuild loaded successfully!');
                console.log('Available methods:', Object.keys(binding));
                console.log('typeof VectorStore:', typeof binding.VectorStore);
              } catch (e) {
                console.log('❌ Failed to load prebuild:', e.message);
                console.log('Error code:', e.code);
                if (e.message.includes('version') || e.message.includes('NODE_MODULE_VERSION')) {
                  console.log('This appears to be an ABI version mismatch');
                }
              }
            }
          "
          
          # Debug what node-gyp-build is actually doing
          echo ""
          echo "Debugging node-gyp-build behavior:"
          cd node_modules/native-vector-store
          
          # First, try node-gyp-build directly to see what paths it checks
          echo "Running node-gyp-build directly to see paths it checks:"
          node -e "
            try {
              console.log('Attempting node-gyp-build from:', __dirname);
              const binding = require('node-gyp-build')(__dirname);
              console.log('✅ node-gyp-build succeeded!');
              console.log('Loaded binding:', Object.keys(binding));
            } catch (e) {
              console.log('❌ node-gyp-build failed:', e.message);
              if (e.message.includes('No native build was found')) {
                console.log('Full error details:', e.toString());
              }
            }
          "
          
          # Also try with debug enabled
          echo ""
          echo "Running with NODE_DEBUG=node-gyp-build:"
          NODE_DEBUG=node-gyp-build node -e "
            try {
              console.log('Attempting to load with node-gyp-build...');
              const binding = require('.');
              console.log('✅ Loaded successfully with node-gyp-build!');
            } catch (e) {
              console.log('❌ node-gyp-build failed:', e.message);
              console.log('Stack:', e.stack);
            }
          "
          cd ../..
          
          # Copy and run the installation test
          cp ../test/test-installed.js .
          echo ""
          echo "Running test (this will fail if node-gyp-build can't find prebuild):"
          node test-installed.js || echo "Test failed as expected"

  test-macos:
    needs: package
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: macos-13  # Intel Mac
            arch: x64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Test packaged tarball
        run: |
          echo "Testing macOS ${{ matrix.arch }} prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          
          # Install the package normally
          npm install ../native-vector-store-*.tgz
          
          # Copy and run the installation test
          cp ../test/test-installed.js .
          node test-installed.js

  test-windows-x64:
    needs: package
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Test packaged tarball
        shell: bash
        run: |
          echo "Testing Windows x64 prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          npm install ../native-vector-store-*.tgz
          # Copy and run the installation test
          cp ../test/test-installed.js .
          node test-installed.js