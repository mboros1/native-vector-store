name: Build Prebuilds

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering for testing
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  prebuild-linux:
    runs-on: ubuntu-latest
    container:
      image: fedora:40
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          dnf install -y gcc-c++ make cmake git nodejs npm python3 perl
          
      - name: Build static libomp
        run: |
          set -euo pipefail
          
          git clone --depth 1 --branch llvmorg-18.1.8 https://github.com/llvm/llvm-project.git
          
          cmake -S llvm-project/openmp -B openmp-build \
                -DCMAKE_BUILD_TYPE=Release \
                -DLIBOMP_ENABLE_SHARED=OFF \
                -DOPENMP_ENABLE_LIBOMPTARGET=OFF \
                -DOPENMP_ENABLE_ARCHER=OFF
          
          cmake --build openmp-build --target omp -j"$(nproc)"
          
          # Locate artifacts robustly
          LIBOMP_PATH=$(find openmp-build -type f -name 'libomp.a' | head -n 1)
          HEADER_PATH=$(find llvm-project/openmp -type f -name 'omp.h' | head -n 1)
          
          if [[ -z "$LIBOMP_PATH" || -z "$HEADER_PATH" ]]; then
            echo "❌  libomp.a or omp.h not found"; exit 1
          fi
          
          echo "libomp.a → $LIBOMP_PATH"
          echo "omp.h    → $HEADER_PATH"
          
          cp "$LIBOMP_PATH" /usr/local/lib/
          cp "$HEADER_PATH" /usr/local/include/
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for Linux ${{ matrix.arch }}
        run: |
          # Static link only libomp, keep the addon as a shared object
          export CXXFLAGS="-fopenmp -I/usr/local/include"
          export LDFLAGS="-L/usr/local/lib -Wl,-Bstatic -l:libomp.a -Wl,-Bdynamic -static-libgcc -pthread"
          npx prebuildify --napi --strip --arch=${{ matrix.arch }}
          
      - name: Verify static linking
        run: |
          # Check that OpenMP is statically linked
          echo "Checking for OpenMP dependencies..."
          objdump -p prebuilds/linux-${{ matrix.arch }}/*.node | grep NEEDED | grep -i omp || echo "✓ No OpenMP runtime dependency"
          echo "All shared library dependencies:"
          ldd prebuilds/linux-${{ matrix.arch }}/*.node || true
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-linux-${{ matrix.arch }}
          path: prebuilds/

  prebuild-alpine:
    runs-on: ubuntu-latest
    container:
      image: node:18-alpine
    strategy:
      matrix:
        arch: [x64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install build dependencies
        run: |
          apk add --no-cache python3 make g++ git
          # Alpine uses musl, which includes OpenMP support
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for Alpine ${{ matrix.arch }}
        run: |
          npx prebuildify --napi --strip --arch=${{ matrix.arch }} --tag-libc
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-alpine-${{ matrix.arch }}
          path: prebuilds/

  prebuild-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install libomp
        run: |
          brew install libomp
          # Find libomp static library
          export LIBOMP_PREFIX=$(brew --prefix libomp)
          echo "LIBOMP_PREFIX=$LIBOMP_PREFIX" >> $GITHUB_ENV
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for macOS ${{ matrix.arch }}
        run: |
          # Try to statically link libomp
          export LDFLAGS="-L${{ env.LIBOMP_PREFIX }}/lib"
          npx prebuildify --napi --strip --arch=${{ matrix.arch }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-darwin-${{ matrix.arch }}
          path: prebuilds/

  prebuild-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build for Windows ${{ matrix.arch }}
        run: |
          npx prebuildify --napi --strip --arch=${{ matrix.arch }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-win32-${{ matrix.arch }}
          path: prebuilds/

  package:
    needs: [prebuild-linux, prebuild-alpine, prebuild-macos, prebuild-windows]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: prebuilds-*
          merge-multiple: true
          path: prebuilds/
      
      - name: List prebuilds
        run: find prebuilds -type f -name "*.node" | sort
      
      - name: Create package
        run: |
          npm pack
          
      - uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: "*.tgz"

  # Test jobs for each platform
  test-linux-x64:
    needs: package
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Test packaged tarball
        run: |
          echo "Testing Linux x64 prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          npm install ../native-vector-store-*.tgz
          # Run a simple test to verify the module loads
          node -e "const vs = require('native-vector-store'); console.log('✓ Module loaded successfully');"
          # Copy test files and run full test suite
          cp -r ../test .
          npm test

  test-linux-arm64:
    needs: package
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Run tests in ARM64 container
        uses: docker://node:18-bullseye
        with:
          platform: linux/arm64
          args: |
            sh -c "
              cd /github/workspace && 
              echo 'Testing Linux ARM64 prebuild...' &&
              mkdir test-install && cd test-install &&
              npm init -y >/dev/null &&
              npm install ../native-vector-store-*.tgz &&
              node -e \"const vs = require('native-vector-store'); console.log('✓ Module loaded successfully');\" &&
              cp -r ../test . &&
              npm test
            "

  test-alpine-x64:
    needs: package
    runs-on: ubuntu-latest
    container: node:18-alpine
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Test packaged tarball
        run: |
          echo "Testing Alpine x64 prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          npm install ../native-vector-store-*.tgz
          # Run a simple test to verify the module loads
          node -e "const vs = require('native-vector-store'); console.log('✓ Module loaded successfully');"
          # Copy test files and run full test suite
          cp -r ../test .
          npm test

  test-macos:
    needs: package
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: macos-13  # Intel Mac
            arch: x64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Test packaged tarball
        run: |
          echo "Testing macOS ${{ matrix.arch }} prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          npm install ../native-vector-store-*.tgz
          # Run a simple test to verify the module loads
          node -e "const vs = require('native-vector-store'); console.log('✓ Module loaded successfully');"
          # Copy test files and run full test suite
          cp -r ../test .
          npm test

  test-windows-x64:
    needs: package
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: npm-package
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Test packaged tarball
        shell: bash
        run: |
          echo "Testing Windows x64 prebuild..."
          mkdir test-install && cd test-install
          npm init -y >/dev/null
          npm install ../native-vector-store-*.tgz
          # Run a simple test to verify the module loads
          node -e "const vs = require('native-vector-store'); console.log('✓ Module loaded successfully');"
          # Copy test files and run full test suite
          cp -r ../test .
          npm test