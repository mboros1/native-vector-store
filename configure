#!/bin/bash
# Configure script for native-vector-store

echo "Configuring native-vector-store..."

# Check for required tools
check_command() {
    if ! command -v $1 &> /dev/null; then
        echo "Error: $1 is required but not found in PATH"
        exit 1
    fi
}

# Check basic requirements
check_command node
check_command npm
check_command make
check_command g++ || check_command clang++

# Check Node.js version
NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 14 ]; then
    echo "Error: Node.js version 14 or higher is required"
    exit 1
fi

# Check for C++ compiler
if command -v g++ &> /dev/null; then
    CXX=g++
elif command -v clang++ &> /dev/null; then
    CXX=clang++
else
    echo "Error: No C++ compiler found (g++ or clang++)"
    exit 1
fi

echo "Found C++ compiler: $CXX"

# Check for OpenMP support
echo "Checking for OpenMP support..."
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    if ! brew list libomp &> /dev/null; then
        echo "Warning: libomp not found. Install with: brew install libomp"
    else
        echo "OpenMP support found (libomp)"
    fi
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    if ! ldconfig -p | grep -q gomp; then
        echo "Warning: OpenMP not found. Install with: sudo apt-get install libomp-dev"
    else
        echo "OpenMP support found (libgomp)"
    fi
fi

# Check for simdjson
echo "Checking for simdjson..."
if [[ "$OSTYPE" == "darwin"* ]]; then
    if ! brew list simdjson &> /dev/null; then
        echo "Warning: simdjson not found. Install with: brew install simdjson"
    else
        echo "simdjson found"
    fi
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    if ! ldconfig -p | grep -q simdjson; then
        echo "Warning: simdjson not found. Install with: sudo apt-get install libsimdjson-dev"
    else
        echo "simdjson found"
    fi
fi

# Create build directory if it doesn't exist
mkdir -p build

# Generate config status
cat > build/config.status << EOF
#!/bin/bash
# Configuration status for native-vector-store
CXX=$CXX
NODE_VERSION=$NODE_VERSION
OSTYPE=$OSTYPE
EOF

chmod +x build/config.status

echo ""
echo "Configuration complete!"
echo "Run 'make' to build the project"
echo "Run 'make test' to run tests"
echo "Run 'make help' for more options"